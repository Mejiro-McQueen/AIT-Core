#!/usr/bin/env python3
import asyncio
import websockets
import json


async def telemetry_view():
    async with websockets.connect("ws://localhost:8000/command_loader") as websocket:
        #while not (msg := input("Enter CL Directive or 'quit':\n")) == 'quit':
        for i in [1]:
            msg = 'CL.Execute MISSION_MANAGER_SWITCH_MODE NO_OVERWRITE_IMMEDIATE 0 0 8 Downlink'
            #msg = 'CL.Validate MISSION_MANAGER_SWITCH_MODE NO_OVERWRITE_IMMEDIATE 0 0 8 Downlink 0'
            #msg = 'CL.Validate /sunrise/data/products/10004/uplink/ben.cl'
            #msg = 'CL.Execute /sunrise/data/products/10004/uplink/ben.cl'
            #msg = 'CL.Validate /sunrise/data/products/10004/uplink/uplink_commands_mnt_data/telemetryprocessorconfig_updated_all.ipk_uplink_products/'
            msg = 'CL.Execute /sunrise/data/products/10004/uplink/uplink_commands_mnt_data/telemetryprocessorconfig_updated_all.ipk_uplink_products/'
            #msg = "CL.Execute INNOFLIGHT_SCR106_ENABLE_DATA_FLOW NO_OVERWRITE_IMMEDIATE 0 0 21600 0.1 0.0"
            m = msg.split(' ')
            directive = m[0]
            if len(m) == 1:
                payload = None
            else:
                payload = m[1:]
            msg = json.dumps({'directive': directive,
                              'payload': payload})
            #print(msg)
            await websocket.send(msg)
            resp = await websocket.recv()
            resp = json.loads(resp)
            resp = json.dumps(resp, indent=4)
            print(resp)
            print("\n")

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(telemetry_view())
    except Exception as e:
        print(e)
    except KeyboardInterrupt:
        pass
        
