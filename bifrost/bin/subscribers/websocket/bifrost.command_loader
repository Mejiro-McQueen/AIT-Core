#!/usr/bin/env python3

import asyncio
import websockets
import json


async def telemetry_view():
#     async for websocket in websockets.connect("ws://localhost:8000/command_loader"):
#         msg = ("CL.Execute", "FSS_START_CFS")

#         msg = json.dumps({'topic': msg[0],
#                           'message': msg[1]})
#         await websocket.send(msg)
#         resp = await websocket.recv()
#         resp = json.loads(resp)
#         resp = json.dumps(resp, indent=4)
#         print(resp)
#         print("\n")
#         break

    # async for websocket in websockets.connect("ws://localhost:8000/service_directive"):
    #     msg = json.dumps({'topic': 'Bifrost.Directive.TCP_Manager.Disconnect',
    #                       'message': 'FSW_SIM_Uplink'})
    #     await websocket.send(msg)
    #     resp = await websocket.recv()
    #     resp = json.loads(resp)
    #     resp = json.dumps(resp, indent=4)
    #     print(resp)
    #     print("\n")
    #     break

    # async for websocket in websockets.connect("ws://localhost:8000/service_directive"):
    #     message = {'topic': 'Uplink.CmdMetaData.CLTU',
    #                'server_name': 'FSW_SIM_Uplink',
    #                'hostname': 'fswsim.gdsit.snr.awsgw1.jpl.nasa.gov',
    #                'port': 43000,
    #                'mode': 'TRANSMIT',
    #                'timeout_seconds': 1}

    #     msg = json.dumps({'topic': 'Bifrost.Directive.TCP_Manager.Connect',
    #                       'message': message})
    #     print(msg)
    #     await websocket.send(msg)
    #     resp = await websocket.recv()
    #     resp = json.loads(resp)
    #     resp = json.dumps(resp, indent=4)
    #     print(resp)
    #     print("\n")
    #     break

    # async for websocket in websockets.connect("ws://localhost:8000/service_directive"):
    #     msg = json.dumps({'topic': 'Bifrost.Directive.TCP_Manager.Connect',
    #                       'message': ''})
    #     await websocket.send(msg)
    #     resp = await websocket.recv()
    #     resp = json.loads(resp)
    #     resp = json.dumps(resp, indent=4)
    #     print(resp)
    #     print("\n")
    #     break


    async for websocket in websockets.connect("ws://localhost:8000/service_directive"):
        msg = json.dumps({'topic': 'Bifrost.Directive.NASA_FSS_Service.Command',
                          'message': 'FSS_START_CFS'})
        await websocket.send(msg)
        resp = await websocket.recv()
        resp = json.loads(resp)
        resp = json.dumps(resp, indent=4)
        print(resp)
        print("\n")
        break

    async for websocket in websockets.connect("ws://localhost:8000/service_directive"):
        msg = json.dumps({'topic': 'Bifrost.Directive.TCP_Manager.Reconnect',
                          'message': 'FSW_SIM_Uplink'})
        await websocket.send(msg)
        resp = await websocket.recv()
        resp = json.loads(resp)
        resp = json.dumps(resp, indent=4)
        print(resp)
        print("\n")
        break



if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(telemetry_view())
    except Exception as e:
        print(e)
    except KeyboardInterrupt:
        pass


 # loop = asyncio.get_event_loop()
 #        loop.run_until_complete(telemetry_view())
 #        while (r := input("Restart Script? [y/n]")) not in ['Y','y','']:
 #            if r not in ['Y', 'y', '']:
 #                return
